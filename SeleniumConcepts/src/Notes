Actions class for Moveto, Drag and drop concept
Select class is for Dropdown concept


Xpaths Concept
Practice website for Xpaths
https://phptravels.com/demo
Preceding-sibling
Following-sibling
parent
child


However, there are different ways of writing dynamic XPaths such as:

Using Single Slash
Using Double Slash
Using Single Attribute
Using Multiple Attribute
//*[@attribute_name1='attribute_value1'][@attribute_name2='attribute_value2]  
Using AND
//*[@attribute_name1='attribute_value1' and @attribute_name2='attribute_value2] 
Using OR
//*[@attribute_name1='attribute_value1' or @attribute_name2='attribute_value2] 
Using contains()
//*[contains(@attribute_name,'attribute_value')]  
Using starts_with()
Using text()
Using last() - selects last input webelement on the page
//input[@type='text'])[last()]


Page Object model (POM) / Page Chaining Model
It is Design pattern approach
It is integrate with data driven framework + TestNG
1. For each page create a seperate Java class
2. Define WebObjects/WebElementsin the clases which are created for each page
3. Actions/Methods  -> Fetures
First Layer  -> Page Layer -> check how many pages, home many features in each page -> Page libraries
Test Layer -> for each class we can create seperate test layers -> We will write test cases in this layer
Test layer will be written by using TestNG
Test base class -> parent class of all classes
We need to have Base class -> it is parent class of all the classes
Properties file -> Environment varaibles, URL, Xpaths, User name, Password
Data will be defined in excel file -> apace POI API is used to read data
TestUtilitis -> Screenshot, send mail
Test Report (Extent Report)

Java
Selenium webdriver
TestNG
Maven
Apache POI API
Extent Report/TestNG Report
Log4j API
Jenkins - CI
GIT Repository
GRID - Parallel Testing
Browsers - FF/Chrome/IE/Safari
MAC/Windows/Linux
VMs/SourceLabs/BrowserStack/Local

Test NG
TestNG -- unit test framework
TDD -- Test Driven Development
purpose--design test cases in a systematic way
--html reports
--diff annotations
--priorities/sequence
--dependency
--grouping
--data provider
testng--open source, free
JAR files
--Java unit testing framework
install Testng in Eclipse:
http://beust.com/eclipse/
Sequence in which testng executes
@BeforeSuite 
@BeforeTest 
@BeforeClass 
@BeforeMethod 
@Test 
@AfterMethod 	
@AfterClass 
@AfterTest 

Groups keyword is used to define group of test case
Dependsonmethod
InvocationCount
Timeout, invocationtimeout
ExceptedException
Create a XML file to run all the classes at once
Retry logic - I retry listener -> can be done at test and run time

Dependencies

<dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>3.141.59</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.testng/testng -->
<dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>7.3.0</version>
    <scope>Compile</scope>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>4.1.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>4.1.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml-schemas</artifactId>
    <version>4.1.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-scratchpad -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-scratchpad</artifactId>
    <version>4.1.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.poi/ooxml-schemas -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>ooxml-schemas</artifactId>
    <version>1.4</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.poi/openxml4j -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>openxml4j</artifactId>
    <version>1.0-beta</version>
</dependency>





